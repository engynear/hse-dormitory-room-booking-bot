import os
import json
from datetime import datetime, timedelta, timezone, date
from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
import aiogram
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from dotenv import load_dotenv

from . import crud, models, schemas
from .database import SessionLocal, engine, Base
from .utils import validate_init_data # We will create this file later

load_dotenv()

# --- Globals ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")

# --- Database ---
Base.metadata.create_all(bind=engine)

# --- FastAPI app ---
app = FastAPI()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- Telegram Bot ---
bot = aiogram.Bot(token=BOT_TOKEN)
dp = aiogram.Dispatcher()

@dp.message(aiogram.filters.CommandStart())
async def start_handler(message: aiogram.types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.",
        reply_markup=keyboard
    )

@app.on_event("startup")
async def on_startup():
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBAPP_URL:
        await bot.set_webhook(url=f"{WEBAPP_URL}/webhook")

@app.post("/webhook")
async def webhook(request: Request):
    update = aiogram.types.Update.model_validate(await request.json(), context={"bot": bot})
    await dp.feed_update(bot, update)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

# --- API Endpoints ---
async def get_user_from_webapp_data(request: Request, db: Session = Depends(get_db)):
    init_data = request.headers.get("X-Telegram-Init-Data")
    if not init_data:
        raise HTTPException(status_code=401, detail="Not authorized")

    is_valid, data = await validate_init_data(BOT_TOKEN, init_data)
    if not is_valid:
        raise HTTPException(status_code=403, detail="Invalid data")

    user_data = json.loads(data['user'])
    user_id = user_data['id']
    username = user_data.get('username', f"user_{user_id}")
    
    db_user = crud.get_user(db, user_id=user_id)
    if not db_user:
        user_in = schemas.UserCreate(id=user_id, username=username)
        db_user = crud.create_user(db, user=user_in)
        
    return db_user

@app.get("/api/rooms")
def get_rooms():
    return ["–¢–µ–Ω–Ω–∏—Å–∫–∞", "–ë–æ—Ç–∞–ª–∫–∞ –≤ –±–ª–æ–∫–∞—Ö", "–ë–æ—Ç–∞–ª–∫–∞ –≤ –∫–æ—Ä–∏–¥–æ—Ä–∞—Ö 2 —ç—Ç–∞–∂–∞", "–ë–æ—Ç–∞–ª–∫–∞ –≤ –∫–æ—Ä–∏–¥–æ—Ä–∞—Ö 3 —ç—Ç–∞–∂–∞"]

@app.get("/api/bookings-by-date", response_model=list[schemas.BookingPublic])
def get_bookings_by_date(
    date: date,
    user: models.User = Depends(get_user_from_webapp_data), # for auth
    db: Session = Depends(get_db)
):
    return crud.get_bookings_by_date(db, query_date=date)

@app.get("/api/my-bookings", response_model=list[schemas.Booking])
def get_my_bookings(user: models.User = Depends(get_user_from_webapp_data), db: Session = Depends(get_db)):
    return crud.get_user_bookings(db, user_id=user.id)

@app.post("/api/book", response_model=schemas.Booking)
def create_booking(
    booking: schemas.BookingCreate,
    user: models.User = Depends(get_user_from_webapp_data),
    db: Session = Depends(get_db)
):
    # Validation
    if booking.start_time < datetime.now(timezone.utc):
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º")
    if booking.start_time > datetime.now(timezone.utc) + timedelta(days=7):
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥")
    if booking.end_time <= booking.start_time:
        raise HTTPException(status_code=400, detail="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞")
    if booking.end_time - booking.start_time < timedelta(minutes=15):
        raise HTTPException(status_code=400, detail="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏ - 15 –º–∏–Ω—É—Ç.")
    if booking.end_time - booking.start_time > timedelta(hours=4):
        raise HTTPException(status_code=400, detail="–ë—Ä–æ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –¥–ª–∏—Ç—å—Å—è –¥–æ–ª—å—à–µ 4 —á–∞—Å–æ–≤")
    
    current_bookings = crud.get_user_bookings(db, user_id=user.id)
    if len(current_bookings) >= 2:
        raise HTTPException(status_code=400, detail="–£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 2 –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏")

    if not crud.is_room_available(db, room=booking.room, start_time=booking.start_time, end_time=booking.end_time):
        raise HTTPException(status_code=400, detail="–≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")

    return crud.create_booking(db=db, booking=booking, user_id=user.id)

@app.delete("/api/booking/{booking_id}")
def delete_booking(
    booking_id: int,
    user: models.User = Depends(get_user_from_webapp_data),
    db: Session = Depends(get_db)
):
    deleted_booking = crud.delete_booking(db, booking_id=booking_id, user_id=user.id)
    if not deleted_booking:
        raise HTTPException(status_code=404, detail="–ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —É–¥–∞–ª–µ–Ω–∏–µ")
    return {"ok": True}

# --- Static Files ---
app.mount("/", StaticFiles(directory="app/static", html=True), name="static")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 